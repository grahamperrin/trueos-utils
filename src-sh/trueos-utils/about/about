#!/bin/sh

########## Memory related info ##################################
VM_PAGESIZE=`sysctl -n vm.stats.vm.v_page_size`
FREE_MEM=$((`sysctl -n vm.stats.vm.v_free_count` * $VM_PAGESIZE))
INACT_MEM=$((`sysctl -n vm.stats.vm.v_inactive_count` * $VM_PAGESIZE))
#CACHE_MEM=$((`sysctl -n vm.stats.vm.v_cache_count` * $VM_PAGESIZE))

AVAIL_MEMORY=$((`sysctl -n hw.realmem` /1024/1024))
FREE_MEMORY=$((($FREE_MEM + $INACT_MEM) /1024 /1024))

#############3 System type TrueOS #################3
# Special function for checking TrueOS version
display_trueos_version()
{
if [ -e "/etc/defaults/trueos-desktop" ] ; then
  VER=`pkg query %v trueos-desktop`
    if [ "$VER" != "" ] ; then
    echo "TrueOS-Desktop-${1}${VER}"
  fi
else
  VER=`pkg query %v trueos-server`
  if [ "$VER" != "" ] ; then
    echo "TrueOS-Server-${1}${VER}"
  fi
fi
}

# Check TrueOS type again for other functions
if [ -e "/etc/defaults/trueos-desktop" ] ; then
  SYSTYPE="DESKTOP"
else
  SYSTYPE="SERVER"
fi

EFICHECK=`dmesg | grep "(efifb)" | awk '{print $1}' | cut -d '(' -f 2 | cut -d ')' -f 1`

# Check to see if BIOS/EFI is used as the bootloader type
if [ $EFICHECK = "efifb"  ] ; then
    export LOADERTYPE=EFI
  else
    export LOADERTYPE=BIOS
fi

# Check to see if Grub is used as the bootloader
if [ -f /etc/grub/grub.cfg ] ; then
    export BOOTLOADER=GRUB
  else
    export BOOTLOADER=BSD
fi

display_trueos_banner()
{
echo "  ______                   ____  _____"
echo " /_  __/______  _____     / __ \/ ___/ "
echo "  / / / ___/ / / / _ \   / / / /\__ \ "
echo " / / / /  / /_/ /  __/  / /_/ /___/ / "
echo "/_/ /_/   \__,_/\___/   \____//____/  "
echo ""                                   
}

# Display pkg info for Desktop
display_pkg_version()
{
  VER=`pkg query %v $2`

  if [ "$VER" != "" ] ; then
    echo "${1}${VER}"
  fi
}

# Display pkg_info

display_trueos_banner 

show_general()
{
echo "General information:"
echo " "
echo "    boot loader ………………………………… `echo $BOOTLOADER`"
echo "                type …………………… `echo $LOADERTYPE`"
echo "    CPU ……………………………………………………… `sysctl -n hw.model`"
echo "        number of cores …………… `sysctl -n kern.smp.cpus`"
echo "    host …………………………………………………… `hostname`"
echo "    memory ……………………………………………… ${AVAIL_MEMORY} MB available, ${FREE_MEMORY} MB free"
echo "    OS git branch …………………………………………………………………………………… `uname -a | awk '{print $7}' | cut -d '(' -f 2 | cut -d ')' -f1`"
echo "    OS git revision ……………………………………………………………………………… `uname -a | awk '{print $7}' | cut -d '(' -f 1`"
echo "    OS kernel ident ………………………………………………… (uname -i) `uname -i`"
echo "    OS platform (architecture) …………………… (uname -m) `uname -m`"
echo "    OS release level ……………………………………………… (uname -r) `uname -r`"
echo "    OS version and patch level … (freebsd-version) `freebsd-version`"
echo "    TrueOS package set ……………… `cat /usr/local/etc/trueos.conf 2>/dev/null | grep '^[[:space:]]*PACKAGE_SET: ' | sed 's|[[:space:]]*PACKAGE_SET: ||g'`"
echo "    TrueOS version ………………………… `display_trueos_version`"
echo "    uptime ……………………………………………… `uptime | awk '{sub(/^.* up +/,"");sub(/, *[0-9]+ users.*/,"");print}'`"
echo "    user  ………………………………………………… `whoami`"

if [ "$SYSTYPE" = "DESKTOP" ]; then 
  echo " "
  echo "Additional information:"
  echo " "
  echo "    desktop environment …………… `sed -n 2p /var/db/pcdm/lastlogin`"
  echo "    Open Sound System (OSS) … `cat /dev/sndstat | grep default`"
  echo "    wireless driver ……………………… `sysctl -b net.wlan.devices`"
  echo "    X11 driver …………………………………… `awk '{if (sub(/^.*Loading.*modules\/drivers\//,"")) { printf "%s ",$0 } }END{print "";}'  < /var/log/Xorg.0.log`"
fi
}

show_network()
{
echo ""
echo "Networking"
echo "=========="
echo ""
echo "Default routing table: "
echo ""
route show default
echo ""
echo "Routing table in numeric format:"
echo ""
netstat -arn
echo ""
echo "Interface information, condensed:"
echo ""
ifconfig | grep -v ether | grep -v bssid
echo ""
echo "DNS-related: "
echo ""
drill
echo ""
echo "----"
echo ""
echo "IPv4 key points (not interface specific): "
echo ""
ifconfig | grep "inet " |  awk '{ print "    "$2 }'
echo ""
echo "IPv6 key points (not interface-specific): "
echo ""
ifconfig | grep "inet6" |  awk '{ print "    "$2 }'
}

show_usage()
{
echo "-n show network information"
echo "-v show all information"
}

# Check for arguments
if [ -z $1 ] ; then
  show_general
  exit 0
fi

case $1 in
        -n)
	show_network
        ;;
	-v)
	show_general
	show_network
	;;
        *)
	show_usage
        ;;
esac
